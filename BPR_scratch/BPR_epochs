import BPR
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm

# Load dataset
df = pd.read_csv("generated_data/user_pairwise_preferences.csv")

# Map user and item IDs to indices
user2id = {u: idx for idx, u in enumerate(df["User_ID"].unique())}
item_ids = pd.concat([df["Preferred"], df["Not_Preferred"]])
item2id = {i: idx for idx, i in enumerate(item_ids.unique())}

# Encode the data
triplets = df.apply(lambda row: (user2id[row["User_ID"]],
                                 item2id[row["Preferred"]],
                                 item2id[row["Not_Preferred"]]), axis=1)
triplets = triplets.tolist()

# Shuffle and split
np.random.shuffle(triplets)
split = int(0.8 * len(triplets))
train_data = triplets[:split]
test_data = triplets[split:]

# Init model
num_users = len(user2id)
num_items = len(item2id)
bpr = BPR.BPR(num_users=num_users, num_items=num_items, latent_dim=64, learning_rate=0.005, reg=0.01)

# Define Precision@K
def precision_at_k(model, data, k=5):
    hits = 0
    for user, pos, _ in data:
        scores = [(item, model.predict(user, item)) for item in range(model.num_items)]
        top_k_items = [item for item, _ in sorted(scores, key=lambda x: -x[1])[:k]]
        if pos in top_k_items:
            hits += 1
    return hits / len(data)

# Train and evaluate
epochs = 10
precision_scores = []

for epoch in tqdm(range(epochs), desc="Training BPR"):
    bpr.train(train_data, epochs=1)
    p_at_5 = precision_at_k(bpr, test_data, k=5)
    precision_scores.append(p_at_5)

# Plot
plt.figure(figsize=(10, 6))
plt.plot(range(1, epochs + 1), precision_scores, marker='o')
plt.title("Precision@5 vs Epochs")
plt.xlabel("Epoch")
plt.ylabel("Precision@5")
plt.grid(True)
plt.tight_layout()
plt.show()
